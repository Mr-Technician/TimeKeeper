@page "/"
@using Blazored.LocalStorage;

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
    @if (Days == null)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudCarousel Style="height:75vh;" @bind-SelectedIndex="SelectedIndex" ShowDelimiters="false" AutoCycle="false" TData="object">
            @foreach (var day in Days)
            {
                <MudCarouselItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Class="ml-n12" Style="float: right;" OnClick="(() => DeleteTimes(day))"></MudIconButton>
                    <MudCard Outlined="true" Style="height:100%;">
                        <MudCardHeader Class="justify-center">
                            <MudText Typo="Typo.h6">
                                @day.Date.ToString("dddd, MMMM dd")
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent Style="height:100%; overflow-y:scroll;">
                            <MudGrid>
                                @if (day.Times != null)
                                {
                                    @foreach (TimeRange time in day.Times)
                                    {
                                        <MudItem xs="6">
                                            <MudTooltip Text="@ExistingToolTip">
                                                <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="time.Start" PickerClosed="SetDays" />
                                            </MudTooltip>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTooltip Text="@ExistingToolTip">
                                                <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" Time="time.End" TimeChanged="((TimeSpan? t) => time.End = t)" PickerClosed="SetDays" />
                                            </MudTooltip>
                                        </MudItem>
                                    }
                                }
                                <MudItem xs="6">
                                    <MudTooltip Text="@NewToolTip">
                                        <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="newTime.Start" PickerClosed="(() => AddTime(day, newTime))" />
                                    </MudTooltip>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTooltip Text="@NewToolTip">
                                        <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="newTime.End" PickerClosed="(() => AddTime(day, newTime))" />
                                    </MudTooltip>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>
                                        @GetTotalTime(day)
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    }
</MudContainer>

@code{
    [Inject]
    private ILocalStorageService localStorage { get; set; }
    private Day[] Days;
    private int SelectedIndex;

    private string NewToolTip = "Click to add time range";
    private string ExistingToolTip = "Click to edit";

    TimeRange newTime = new();

    private TimeSpan GetTotalTime(Day day) => day.Times.Sum(x => x.GetTime());

    private async Task AddTime(Day day, TimeRange time)
    {
        if (time.Start != default && time.End != default) //if valid, add the time
        {
            Console.WriteLine($"{time.Start}:{time.End}");
            Console.WriteLine(day.Times.Count());
            day.Times.Add(time);
            newTime = new();
            await SetDays();
        }
    }

    private async Task DeleteTimes(Day day)
    {
        day.Times = new List<TimeRange>(); //reset days
        await SetDays();
    }

    /// <summary>
    /// Saves the days to local storage
    /// </summary>
    private async Task SetDays()
    {
        await localStorage.SetItemAsync("timekeeper-days", Days);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(nameof(OnInitializedAsync));
        Days = await localStorage.GetItemAsync<Day[]>("timekeeper-days");

        if (Days == null)
        {
            var sunday = DateTime.Now.Date.StartOfWeek(DayOfWeek.Sunday);
            Days = new Day[] {
                new Day(sunday),
                new Day(sunday.AddDays(1)),
                new Day(sunday.AddDays(2)),
                new Day(sunday.AddDays(3)),
                new Day(sunday.AddDays(4)),
                new Day(sunday.AddDays(5)),
                new Day(sunday.AddDays(6))
            };
        }

        SelectedIndex = (int)DateTime.Now.DayOfWeek;
    }
}