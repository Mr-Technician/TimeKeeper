@using Blazored.LocalStorage

<MudItem xs="6">
    <MudTooltip Text="@NewToolTip">
        <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="newTime.Start" @bind-Time:after="() => SaveStart()" PickerClosed="(() => Add(newTime))" />
    </MudTooltip>
</MudItem>
<MudItem xs="6">
    <MudTooltip Text="@NewToolTip">
        <MudTimePicker PickerVariant="PickerVariant.Dialog" AmPm="true" @bind-Time="newTime.End" PickerClosed="(() => Add(newTime))" />
    </MudTooltip>
</MudItem>

@code {
    [Inject]
    private ILocalStorageService localStorage { get; set; }
    
    [Parameter]
    public EventCallback<TimeRange> DateAdded { get; set; }
    private string NewToolTip = "Click to add time range";
    private TimeRange newTime = new();

    private async Task Add(TimeRange time)
    {
        if (time.Start != default && time.End != default) //if valid, add the time
        {
            await DateAdded.InvokeAsync(newTime);
            newTime = new();
        }
    }

    private ValueTask SaveStart() => localStorage.SetItemAsync("timekeeper-start", newTime.Start);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var start = await localStorage.GetItemAsync<TimeSpan?>("timekeeper-start");
            if (start != null && newTime.Start == null)
            {
                newTime.Start = start;
                StateHasChanged();
            }
        }
    }

}
